?swiss
data=swiss
# N1 (i)
spear_res = rep(0,5)
kend_res = rep(0,5)
for (i in range(2:6)){
spear_res[i-1] = cor.test(data[,1], data[,i], method = 'spearman')$p.value
kend_res[i-1]= cor.test(data[,1], data[,i], method = 'kendall')$p.value
}
spear_res
kend_res
# So, we can see, that H0 (no correlation) should be rejected in each
# kind of test for all variables except 'Agricultuce' (with alpha=0.05).
# But data has ties and there is a problem for computing this nonparams tests.
# N1 (ii)
x1=data[,1]
x2=data[,2]
# drop outliers using boxplot method
boxplot(x1)
boxplot(x2) # there are no outliers in Agriculture variable
q=boxplot.stats(x1)$out
data_clear = data[-which(x1 %in% q),1:2] #drop outliers
cor.test(data_clear[,1], data_clear[,2], method = 'spearman')
cor.test(data_clear[,1], data_clear[,2], method = 'kendall')
# So, H0 could not be rejected in all test when we use data without
# outliers. This result means that the variables have some correlation.
cor.test(data_clear[,1], data_clear[,2], method = 'spearman')
# seminar 3
# seminar 3
# seminar 3
# seminar 3
# seminar 3
faithful
x=faithful$eruptions
x
plot(density(x))
density(x)$bw
band=c("nrd0", "nrd", "ucv", "bcv", "SJ")
for (j in (2:5)){
lines(density(x, bw=band[j]),col=j)
print(density(x, bw=band[j])$bw)
}
N=1000
xi=sample(0:5,size=N,replace=TRUE,
prob = c(rep(0.1,5),0.5))
table(xi)
m=c(-1,-1/2,0,1/2,1,0)
s=c(rep(0.1,5),1)
X=rep(0,N)
for (j in (1:N)){
X[j]=rnorm(1, mean=m[xi[j]+1],
sd=s[xi[j]+1])
}
K=eval(formals(density.default)$kernel)
plot(density(X))
for (j in (2:5)){
#lines(density(X, kernel=K[j]), col=j)
lines(density(X, bw=band[j]),col=j)
}
p=function(x){
y=dnorm(x)/2
for (j in (0:4)){
y=y+dnorm(x,mean=m[j+1],sd=0.1)/10
}
return(y)
}
J=function(d){
R=0
for (i in (1:length(d$x))){
R=R+(p(d$x[i])-d$y[i])^2
}
return(R)
}
M=matrix(data=NA, nrow=7, ncol=5)
for (j in (1:7)){
for (k in (1:5)){
M[j,k]=J(density(X, kernel=K[j], bw=band[k]))
}
}
which.min(M)
M
j=6
k=3
plot(density(X, kernel=K[j], bw=band[k]))
density(X, kernel=K[j], bw=band[k])$bw
vec=seq(from=0.0001, to=0.2, length=100)
M2=rep(0,100)
for (j in (1:100)){
M2[j]=J(density(X, bw=vec[j]))
}
which.min(M2)
plot(density(X, bw=vec[26]))
# seminar 5
# seminar 5
# seminar 5
# seminar 5
# seminar 5
cars
plot(cars)
x=cars$speed
y=cars$dist
spanvec=c(0.05, 0.2, 0.5, 1)
for (j in (1:4)){
lines(supsmu(x, y, span=spanvec[j]),col=j)
}
legend(18,40, legend=spanvec, col=seq(spanvec),
lty=1,cex=.5)
plot(cars)
lines(supsmu(x, y))
lines(supsmu(x, y, span=0.2), col="red")
plot(cars)
lines(supsmu(x, y, span=1), col="red")
abline(lm(y~x))
plot(cars)
lines(supsmu(x, y, bass=10)))
lines(supsmu(x, y, bass=0), col="red")
l1=loess(dist~speed, cars,
control=loess.control(surface="direct"))
plot(cars)
lines(l1)
s=seq(from=5, to=30, by=1)
s
p=predict(l1, data.frame(speed=s), se=TRUE)
plot(x,y, xlim=c(4,31))
lines(s, p$fit, col="red")
install.packages("fANCOVA")
